# Сделаем нейросеть, которая исходя из заданных 10 точек на координатной плоскости будет пытаться провести прямую, максимально попадая по точкам
import random

# Начнём с коэффициента Х
k = random.uniform(-5, 5)

# Свободный член уравнения прямой
c = random.uniform(-5, 5)

# Выше мы определили случайную прямую, теперь выведем нашу прямую
print('Начальная прямая: ', k, '* Х + ', c)

# Набор точек X:Y
data = {
    1: 2,
    2: 4.2,
    2.5: 5,
    3.8: 7.9,
    4: 9,
    6: 10.2,
    6.6: 13,
    7.2: 15.3,
    8: 17.1,
    8.5: 19.5
}

# Добавим скорость обучения сети, чтобы уменьшить вероятность ошибки
rate = 0.0001


# Теперь считаем Y
def proceed(x):
    return x * k + c


# Настало время тренировки
for i in range(100000):
    x = random.choice(list(data.keys()))  # Получаем случайную X-координату точки
    true_result = data[x]  # И считаем Y-координату
    out = proceed(x)  # Ответ сети
    delta = true_result - out  # Считаем ошибку сети
    k += delta*rate*x  # Меняем вес при Х в соответствии с дельта-правилом
    c += delta*rate  # Меняем вес при постоянном входе


print('Готовая прямая: ', k, '* Х + ', c)